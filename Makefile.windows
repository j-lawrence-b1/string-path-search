PROJECT_ROOT=$(MAKEDIR)
VENV=$(PROJECT_ROOT)\venv
DIST=$(PROJECT_ROOT)\dist
TEMP=$(PROJECT_ROOT)\tests\temp
BUILD=$(PROJECT_ROOT)/build
OUT_DIR=$(PROJECT_ROOT)\temp
EGG_INFO=$(PROJECT_ROOT)\string_path_search.egg-info
MAKEFILE_LIST=$(PROJECT_ROOT)\Makefile

.phony:

help: .phony ## Show this help message.
	@echo 'usage: make [target] ...'
	@echo
	@echo 'targets:'
	@echo "  real-clean       ## In addition to the regular clean, cleanup venv
	@echo "  clean            ## cleanup build and distribution products
	@echo "  clean-venv       ## Cleanup this project's Python virtual environment
	@echo "  venv             ## Setup a Python virtual environment for this project.
	@echo "  install-packages ## Install third party packages required to build
	@echo "  test:            ## Use nose2 to run the test scripts.

real-clean: clean-venv clean ## In addition to the regular clean, cleanup the python virtual environment.

clean: .phony ## cleanup build and distribution products
	@for %%D in ($(BUILD) $(DIST) $(EGG_INFO)) do ( if EXIST %%D (echo "cleaning %%D"; rmdir /q /s %%D ))

clean-venv: .phony ## Cleanup this project's Python virtual environment
	@if EXIST $(VENV) ( \
	    $(VENV)/Scripts/deactivate; \
      rmdir /s /q $(VENV); \
    )

venv: $(VENV) ## Setup a Python virtual environment for this project.

$(VENV):
	@$(PYTHON) -m venv $(VENV)

install-packages: venv ## Install third party packages required to build this project
	@$(VENV)/Scripts/activate; \
    $(PYTHON) -m pip install --upgrade pylint nose2 setuptools Pillow xlsxwriter twine

test:.phony ## Use nose2 to run the test scripts.
	@$(VENV)/Scripts/activate; \
    $(PYthon) -m nose2

