PYTHON        = python
PROJECT_ROOT  = $(shell pwd)
VENV          = ${PROJECT_ROOT}/venv-linux
DIST          = ${PROJECT_ROOT}/dist
TEMP          = ${PROJECT_ROOT}/tests/temp
BUILD         = ${PROJECT_ROOT}/build
OUT_DIR       = ${PROJECT_ROOT}/temp
EGG_INFO      = ${PROJECT_ROOT}/string_path_search.egg-info
MAKEFILE_LIST = ${PROJECT_ROOT}/Makefile.linux

.PHONY: help clean clean-venv install-packages test

default:test

help: ## Show this help message.
	@echo 'usage: make [target] ...'
	@echo
	@echo 'targets:'
	@egrep  '^(.+):(.*) ## (.+)' ${MAKEFILE_LIST} | grep -v egrep | sed 's/:.*##/: ##/' | column -t -c 2 -s ':#'

real-clean:clean-venv clean ## In addition to the regular clean, cleanup the python virtual environment.

clean: ## cleanup build and distribution products
	@for dir in ${BUILD} ${DIST} ${EGG_INFO}; do \
    if [ -d "$$dir" ]; then \
		  echo "cleaning up $$dir"; \
		  rm -r "$$dir"; \
    fi; \
	done

clean-venv: ## Cleanup this project's Python virtual environment
	@if [ -d "${VENV}" ]; then \
		    echo "Cleaning up ${VENV}"; \
        rm -rf ${VENV}; \
    fi

venv:${VENV} ## Setup a Python virtual environment for this project.

${VENV}:
	${PYTHON} -m venv ${VENV}

install-packages:venv ## Install third party packages required to build this project
	. ${VENV}/bin/activate; \
    ${PYTHON} -m pip install --upgrade pip; \
    ${PYTHON} -m pip install --upgrade pylint nose2 setuptools twine

install:install-packages ## Run setup.py build and install
	. ${VENV}/bin/activate; ${PYTHON} setup.py install

test:install ## Use nose2 to run the test scripts.
	. ${VENV}/bin/activate; ${PYTHON} -m nose2 --verbose

